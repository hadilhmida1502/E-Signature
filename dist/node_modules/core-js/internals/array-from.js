'use strict';import bind from"/node_modules/core-js/internals/function-bind-context.js";import toObject from"/node_modules/core-js/internals/to-object.js";import callWithSafeIterationClosing from"/node_modules/core-js/internals/call-with-safe-iteration-closing.js";import isArrayIteratorMethod from"/node_modules/core-js/internals/is-array-iterator-method.js";import toLength from"/node_modules/core-js/internals/to-length.js";import createProperty from"/node_modules/core-js/internals/create-property.js";import getIteratorMethod from"/node_modules/core-js/internals/get-iterator-method.js";const _ref={exports:{}};(function(module,exports){module.exports=function from(arrayLike){var length,result,step,iterator,next,value,O=toObject(arrayLike),C="function"==typeof this?this:Array,argumentsLength=arguments.length,mapfn=1<argumentsLength?arguments[1]:void 0,mapping=void 0!==mapfn,iteratorMethod=getIteratorMethod(O),index=0;if(mapping&&(mapfn=bind(mapfn,2<argumentsLength?arguments[2]:void 0,2)),null!=iteratorMethod&&!(C==Array&&isArrayIteratorMethod(iteratorMethod)))for(iterator=iteratorMethod.call(O),next=iterator.next,result=new C;!(step=next.call(iterator)).done;index++)value=mapping?callWithSafeIterationClosing(iterator,mapfn,[step.value,index],!0):step.value,createProperty(result,index,value);else for(length=toLength(O.length),result=new C(length);length>index;index++)value=mapping?mapfn(O[index],index):O[index],createProperty(result,index,value);return result.length=index,result}})(_ref,_ref.exports);export default _ref.exports;